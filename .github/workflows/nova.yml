name: Nova CI Rescue

on:
  workflow_dispatch:
    inputs:
      max_iterations:
        description: "Maximum number of fix iterations"
        required: false
        default: "6"
        type: string
      timeout:
        description: "Overall timeout in seconds"
        required: false
        default: "1200"
        type: string
      verbose:
        description: "Enable verbose output"
        required: false
        default: false
        type: boolean
      python_version:
        description: "Python version to use"
        required: false
        default: "3.11"
        type: choice
        options:
          - "3.10"
          - "3.11"
          - "3.12"

permissions:
  contents: write
  pull-requests: write
  issues: write
  actions: read
  checks: write

jobs:
  nova-fix:
    name: Fix Failing Tests with Nova
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetch all history for proper git operations

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ inputs.python_version }}

      - name: Cache pip packages
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/pyproject.toml', '**/requirements.txt', '**/setup.py') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install Nova CI-Rescue
        run: |
          echo "📦 Installing Nova CI-Rescue and dependencies..."

          # Check if this repo is Nova itself or a target repo
          if [ -f "pyproject.toml" ] && grep -q "nova-ci-rescue" pyproject.toml; then
            echo "Installing Nova from current repository..."
            pip install --upgrade pip setuptools wheel
            pip install -e .
          else
            echo "Installing Nova from PyPI/source..."
            # For now, install from the local path since it's not on PyPI yet
            # In production, this would be: pip install nova-ci-rescue
            pip install --upgrade pip setuptools wheel
            
            # Clone Nova repository temporarily for installation
            git clone https://github.com/novasolve/ci-auto-rescue.git /tmp/nova-ci-rescue
            pip install -e /tmp/nova-ci-rescue
          fi

          # Install test dependencies if they exist
          if [ -f "requirements.txt" ]; then
            pip install -r requirements.txt
          fi

          if [ -f "requirements-test.txt" ]; then
            pip install -r requirements-test.txt
          fi

          # Verify installation
          nova --help

      - name: Configure Nova Environment
        run: |
          echo "🔧 Configuring Nova environment..."

          # Set up API keys from secrets (if provided)
          if [ -n "${{ secrets.OPENAI_API_KEY }}" ]; then
            echo "OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}" >> $GITHUB_ENV
            echo "✅ OpenAI API key configured"
          fi

          if [ -n "${{ secrets.ANTHROPIC_API_KEY }}" ]; then
            echo "ANTHROPIC_API_KEY=${{ secrets.ANTHROPIC_API_KEY }}" >> $GITHUB_ENV
            echo "✅ Anthropic API key configured"
          fi

          # Set Nova configuration
          echo "NOVA_TELEMETRY_DIR=telemetry" >> $GITHUB_ENV
          echo "NOVA_MAX_ITERS=${{ inputs.max_iterations }}" >> $GITHUB_ENV
          echo "NOVA_RUN_TIMEOUT_SEC=${{ inputs.timeout }}" >> $GITHUB_ENV

          # Configure git for commits
          git config --global user.email "nova-bot@github.com"
          git config --global user.name "Nova CI-Rescue Bot"

      - name: Run Initial Tests (Pre-Fix)
        id: initial_tests
        continue-on-error: true
        run: |
          echo "🧪 Running initial tests to identify failures..."

          # Run pytest with JUnit XML output
          pytest --tb=short --maxfail=10 --junit-xml=initial_tests.xml || true

          # Count failures
          if [ -f "initial_tests.xml" ]; then
            failures=$(python -c "import xml.etree.ElementTree as ET; tree = ET.parse('initial_tests.xml'); root = tree.getroot(); failures = int(root.get('failures', 0)); errors = int(root.get('errors', 0)); print(failures + errors)")
            echo "initial_failures=$failures" >> $GITHUB_OUTPUT
            echo "📊 Found $failures failing test(s)"
          else
            echo "initial_failures=0" >> $GITHUB_OUTPUT
            echo "⚠️ No test results found"
          fi

      - name: Run Nova Fix
        id: nova_fix
        run: |
          echo "🚀 Running Nova CI-Rescue to fix failing tests..."
          echo "================================================"

          # Prepare verbose flag
          VERBOSE_FLAG=""
          if [ "${{ inputs.verbose }}" = "true" ]; then
            VERBOSE_FLAG="--verbose"
          fi

          # Run Nova fix command
          nova fix . \
            --max-iters ${{ inputs.max_iterations }} \
            --timeout ${{ inputs.timeout }} \
            $VERBOSE_FLAG || NOVA_EXIT_CODE=$?

          # Check exit code
          if [ "${NOVA_EXIT_CODE:-0}" -eq 0 ]; then
            echo "✅ Nova successfully fixed all tests!"
            echo "nova_success=true" >> $GITHUB_OUTPUT
          else
            echo "⚠️ Nova completed with some tests still failing or hit limits"
            echo "nova_success=false" >> $GITHUB_OUTPUT
          fi

      - name: Run Final Tests (Post-Fix)
        id: final_tests
        if: always()
        run: |
          echo "🧪 Running final tests to verify fixes..."

          # Run pytest with JUnit XML output
          pytest --tb=short --maxfail=10 --junit-xml=final_tests.xml || true

          # Count failures
          if [ -f "final_tests.xml" ]; then
            failures=$(python -c "import xml.etree.ElementTree as ET; tree = ET.parse('final_tests.xml'); root = tree.getroot(); failures = int(root.get('failures', 0)); errors = int(root.get('errors', 0)); print(failures + errors)")
            echo "final_failures=$failures" >> $GITHUB_OUTPUT
            echo "📊 Final result: $failures failing test(s)"
          else
            echo "final_failures=0" >> $GITHUB_OUTPUT
          fi

      - name: Generate Summary Report
        if: always()
        run: |
          echo "📝 Generating summary report..."

          # Create summary markdown
          cat > summary.md << EOF
          # Nova CI-Rescue Execution Summary

          ## Results
          - **Initial Failures**: ${{ steps.initial_tests.outputs.initial_failures }}
          - **Final Failures**: ${{ steps.final_tests.outputs.final_failures }}
          - **Tests Fixed**: $((${{ steps.initial_tests.outputs.initial_failures }} - ${{ steps.final_tests.outputs.final_failures }}))
          - **Success**: ${{ steps.nova_fix.outputs.nova_success }}

          ## Configuration
          - **Max Iterations**: ${{ inputs.max_iterations }}
          - **Timeout**: ${{ inputs.timeout }}s
          - **Python Version**: ${{ inputs.python_version }}
          - **Verbose**: ${{ inputs.verbose }}

          ## Artifacts
          - Telemetry traces and logs: \`telemetry/\`
          - Patches applied: \`telemetry/*/patches/\`
          - Test reports: \`telemetry/*/reports/\`
          - Nova working directory: \`.nova/\`
          EOF

          # Add to GitHub summary
          cat summary.md >> $GITHUB_STEP_SUMMARY

      - name: Upload Telemetry Artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: nova-telemetry-${{ github.run_id }}-${{ github.run_attempt }}
          path: |
            telemetry/
          retention-days: 30
          if-no-files-found: warn

      - name: Upload Nova Working Directory
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: nova-workdir-${{ github.run_id }}-${{ github.run_attempt }}
          path: |
            .nova/
          retention-days: 7
          if-no-files-found: warn

      - name: Upload Test Reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-reports-${{ github.run_id }}-${{ github.run_attempt }}
          path: |
            initial_tests.xml
            final_tests.xml
            telemetry/*/reports/*.xml
            telemetry/*/reports/*.json
          retention-days: 30
          if-no-files-found: warn

      - name: Upload Patches
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: patches-${{ github.run_id }}-${{ github.run_attempt }}
          path: |
            telemetry/*/patches/*.patch
          retention-days: 30
          if-no-files-found: warn

      - name: Create PR with Fixes (if branch created)
        if: steps.nova_fix.outputs.nova_success == 'true' && github.event_name == 'workflow_dispatch'
        continue-on-error: true
        run: |
          echo "📤 Checking for nova-fix branch to create PR..."

          # Check if nova-fix branch exists and has changes
          if git branch -r | grep -q "origin/nova-fix"; then
            echo "Nova fix branch exists on remote"
          elif git branch | grep -q "nova-fix"; then
            echo "Pushing nova-fix branch to remote..."
            git push origin nova-fix:nova-fix
            
            # Create PR using GitHub CLI if available
            if command -v gh &> /dev/null; then
              gh pr create \
                --title "🤖 Nova CI-Rescue: Fix failing tests" \
                --body "This PR was automatically generated by Nova CI-Rescue to fix failing tests.
                
                ## Summary
                - Fixed $((${{ steps.initial_tests.outputs.initial_failures }} - ${{ steps.final_tests.outputs.final_failures }})) test(s)
                - Initial failures: ${{ steps.initial_tests.outputs.initial_failures }}
                - Remaining failures: ${{ steps.final_tests.outputs.final_failures }}
                
                ## Artifacts
                Check the workflow run artifacts for detailed logs, patches, and test reports.
                
                ---
                *Generated by Nova CI-Rescue*" \
                --base main \
                --head nova-fix \
                --label "automated-fix" \
                --label "nova-ci-rescue" || echo "Could not create PR automatically"
            fi
          else
            echo "No nova-fix branch found"
          fi

      - name: Comment on Issue/PR (if triggered from issue)
        if: always() && github.event_name == 'workflow_dispatch'
        continue-on-error: true
        run: |
          # This step would comment on relevant issues/PRs if triggered from them
          echo "📢 Nova CI-Rescue run completed"
          echo "Check the workflow summary and artifacts for details"

Nova CI-Rescue ‚Äî Happy Path MVP (Linear Project)
Milestone A ‚Äî Local Happy Path (E2E)
Goal: nova fix <repo> turns a failing test suite green on a sample repo.

Init failing-tests context before planning

Desc: Run pytest once at start; capture failing tests + traces; seed AgentState.

AC: Planner prompt includes top N failures; run skips if none.

Est: 2h

Deps: none

Labels: backend, agent, must-have

CLI: branch + revert safety solid

Desc: Create nova-fix/<ts> upfront; on abort/fail, clean reset to pre-run HEAD.

AC: Ctrl+C leaves repo clean; success prints branch name in summary.

Est: 1h

Deps: none

Labels: cli, must-have

Patch apply + commit loop validation

Desc: Ensure each approved diff is applied + git commit -m "nova: step N".

AC: After a run, branch shows 1+ commits; files match planned diff.

Est: 2h

Deps: (2)

Labels: backend, must-have

Global timeout & max_iters respected

Desc: Enforce --timeout and --max-iters from CLI; graceful stop with summary.

AC: Exits with code‚â†0 on timeout; prints reason.

Est: 1h

Deps: none

Labels: backend

Happy-path smoke run on sample repo

Desc: Use a seed repo with 1‚Äì2 failing tests; run nova fix to green.

AC: Green tests; branch with commits; summary shows success: true.

Est: 0.5d

Deps: (1)(2)(3)(4)

Labels: testing, must-have

Milestone B ‚Äî Quiet CI + Observability
Goal: Minimal noise, reproducible runs, clear traces.

Quiet pytest defaults

Desc: Add pytest.ini: -q --disable-warnings --maxfail=1 -o log_cli=false -o log_level=WARNING -o console_output_style=count.

AC: CI logs <5KB for pass, <50KB for fail.

Est: 30m

Labels: ci, testing, must-have

Telemetry: node-level events

Desc: Log planner/actor/critic/apply/test/reflect events to .nova/<run>/trace.jsonl; save diffs/step-N.patch, reports/junit.xml.

AC: Opening the JSONL shows full step sequence; artifacts exist.

Est: 0.5d

Labels: observability, must-have

Packaging sanity

Desc: Fix deps (typer>=0.12, ensure junitparser and/or pytest-json-report as needed), verify entrypoint nova.

AC: Fresh venv ‚Üí pip install -e . ‚Üí nova --help OK.

Est: 1h

Labels: packaging

README Quickstart (MVP)

Desc: 10-step ‚Äúget green locally‚Äù doc + troubleshooting.

AC: New user can install, run, see artifacts.

Est: 2h

Labels: docs, must-have

Milestone C ‚Äî CI/PR Flow (GitHub-First)
Goal: Run in GH Actions and surface proof.

GH Action: simulate job

Desc: Workflow that checks out repo, installs nova, runs nova fix on a branch or fork; artifacts uploaded (.nova/*, junit).

AC: Manual dispatch succeeds; artifacts downloadable.

Est: 0.5d

Labels: ci, must-have

Scorecard check-run + PR comment

Desc: Emit concise check summary (‚è±, üí≤, steps, result) + PR comment with link to artifacts.

AC: On success, check shows pass & summary; on fail, shows fail + next steps.

Est: 0.5d

Deps: (10)

Labels: ci, ux

Safety caps

Desc: Enforce diff/file caps (e.g., ‚â§200 LOC, ‚â§10 files) and denylist paths by default; block merge if exceeded.

AC: Violations short-circuit with friendly message.

Est: 2h

Labels: safety, must-have

Milestone D ‚Äî Eval harness (v0) & Beta
Goal: Batch test against 3‚Äì5 repos and publish results.

nova eval polish

Desc: YAML input, per-repo run, results JSON with success, duration, iters.

AC: evals/results/<ts>.json summarizes runs; exit code non-zero if any hard fail.

Est: 0.5d

Labels: eval

Starter demo repo

Desc: Public template with seeded failing test + GH Action wired.

AC: One-click ‚ÄúUse this template‚Äù ‚Üí run ‚Üí green with Scorecard.

Est: 0.5d

Labels: demo, growth

Proof thread checklist

Desc: Script/guide to export before/after, diffstat, metrics.

AC: 1-pager to post a daily proof.

Est: 1h

Labels: growth

Backlog / Nice-to-haves
VS Code command surface (Fix this test) ‚Üí shells out to nova fix with context (P2).

OrgSpec policy file loader (caps/denylist from YAML) (P2).

Model routing toggle (cheap vs. premium) (P2).

Dependencies Graph (quick)
(1)‚Üí(5)
(2)‚Üí(3)‚Üí(5)
(6)‚Üí(10)
(10)‚Üí(11)
(7) + (8) ‚Üí (9)
(11) ‚Üí (13) ‚Üí (14)

Issue Templates (copy into Linear tickets)
Title: Init failing-tests context before planning
Description:

Run pytest once at start of nova fix; collect failing tests (names, messages, file:line).

Seed AgentState and planner prompt with top N unique failures.
Acceptance Criteria:

If no failures, CLI exits with ‚Äúnothing to fix‚Äù.

Planner prompt contains failing tests summary.

Telemetry logs initial failure set.

Title: Telemetry: node-level events + artifacts
Description:

Log events for planner/actor/critic/apply/test/reflect with timestamps and key fields.

Save diffs/step-N.patch and reports/junit.xml under run dir.
Acceptance Criteria:

.nova/<run>/trace.jsonl reconstructs full loop.

Patches and junit artifacts present.

Title: GH Action: simulate job
Description:

Add /.github/workflows/nova.yml to run nova fix on manual dispatch.

Upload .nova and junit as artifacts.
Acceptance Criteria:

Green job on sample repo; artifacts downloadable.

Suggested Sprint Plan (5‚Äì6 days)
Day 1: (1)(2)(3)

Day 2: (5) shake-down run; fix small bugs

Day 3: (6)(7)(8) ‚Üí (9)

Day 4: (10)(11)(12)

Day 5: (13)(14) + (15)

Labels & Defaults
Priority: P0 = must-have (1,2,3,5,6,7,8,9,10,11,12) / P1 = nice-to-ship (13,14,15)

Teams: backend, cli, ci, observability, docs, growth

Definition of Done (project):

nova fix turns a seeded failing repo green locally (A-5).

GH Action job passes with Scorecard/PR comment (B-6, C-10/11).

Telemetry trace & artifacts complete (B-7).

README Quickstart enables a new user to reproduce (B-9).

If you want, I can turn this into actual Linear issues with descriptions/AC checklists formatted for copy-paste, or tailor it to your Linear workflow (labels, cycles, templates).
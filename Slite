📄 Slite Document — Nova CI-Rescue Progress Snapshot & Release Plan
1. Current Build Status (as of [today’s date])
Core Architecture in Place ✅

Project structure & packaging — src/nova modules, pyproject.toml, console entrypoint set.

Settings & telemetry — NovaSettings (Pydantic), .env loading, JSONL telemetry logger with artifact storage.

Core tools — git branch/commit/reset, unified diff patcher (with safety limits), pytest runner (JUnit parsing), code search, sandbox execution.

LLM integration — OpenAI/Anthropic clients with network allowlist, OpenSWE client wrapper; prompt templates for planner/actor/critic.

Agent state machine — LangGraph/fallback loop with nodes: Planner → Actor → Critic → ApplyPatch → RunTests → Reflect, including iteration cap and global timeout.

CLI — nova fix (single repo) and nova eval (batch run) commands with Typer; branch creation, run cleanup on abort, telemetry hook-up, and basic success/fail summary.

Integration & Wiring ⚠️

CLI and agent integrated — can run full loop in dry-run mode and on real repos with API keys.

Git branch creation moved to CLI, commit loop works, iteration/timeout enforcement in place.

Telemetry partially integrated — high-level events logged, node-level events/artifacts pending.

Initial failing-tests context not yet auto-injected into planner prompt (currently must be manual or handled in node).

Packaging & Docs 🚧

Some dependency cleanup needed (typer[all] extra, pytest-json-report plugin).

README lacks Quickstart; minimal user-facing docs.

2. Release Schedule (Clean Calendar View)
Week	Focus	Deliverables
Wk 1 (Now → Fri)	Local E2E Happy Path	Inject failing-tests context → planner, finalize branch/commit loop, quiet pytest defaults, node-level telemetry + artifacts, README Quickstart. Smoke test on sample repo: ✅ green tests, artifacts saved.
Wk 2	GitHub Action + PR Flow	GH Action workflow (nova fix simulate job) with artifacts, Scorecard check-run + PR comment, enforce diff/file caps.
Wk 3	Eval Harness & Demo	Polish nova eval batch mode, starter demo repo (seed failing tests, GH Action), publish first proof threads from real runs.
Wk 4	Beta Rollout	Run eval suite on 3–5 target repos, measure success rate, onboard first beta partners. Docs pass (setup, CI usage, troubleshooting).

3. Prompt for Cursor (Kickoff Conversation)
You can paste this as the first message in a Cursor chat to set context:

I’m building Nova CI-Rescue, a CLI + GitHub Action that takes a repo with failing tests → green PR in ≤48h, powered by a LangGraph agent loop (Planner → Actor → Critic → ApplyPatch → RunTests → Reflect).

Current state:

All core modules (tools, LLM clients, agent loop, CLI) are implemented.

CLI runs through the loop in dry-run mode and can target a repo if API keys are set.

Telemetry partial (node-level logs missing), failing-tests context not yet fed to planner automatically, packaging/docs need cleanup.

Goal for this sprint: finish the “happy path” so nova fix <repo> turns a seeded failing repo green locally with saved artifacts and a branch of commits.

I want you to:

Review the current CLI and agent integration for any obvious bugs or missing wiring for this goal.

Suggest concrete code changes to:

run pytest initially and seed planner with failures,

add telemetry logging in each node,

quiet pytest output for CI,

polish branch creation + commit loop.

Help write minimal Quickstart docs for the README based on final flow.

Ask me any questions you need about repo layout or current function signatures — I can paste code on demand.

4. Should We Prompt Open-SWE Again?
Value: Yes — but narrowly scoped. Open-SWE is best when you can hand it a well-bounded, mechanical integration task that’s already defined in detail. It struggles with broad, cross-cutting changes unless broken down.

What to delegate now:

Telemetry instrumentation — add logger.log_event calls + artifact writes in each agent node; follow an exact schema you define.

Initial failing-tests run injection — wire pytest_runner output into planner prompt.

GH Action scaffold — minimal workflow YAML for nova fix with manual dispatch and artifact upload.

Packaging cleanup — adjust pyproject.toml deps, verify entrypoint.

Those are discrete, testable, and low-risk to let Open-SWE draft in-repo.

Do you want me to go ahead and draft that Open-SWE task prompt so it can start instrumenting telemetry + seeding failing tests right away? That way, while you work on the rest, it’s already handling those repetitive insertions.
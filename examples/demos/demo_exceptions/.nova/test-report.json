{"created": 1755523428.4663641, "duration": 0.030532360076904297, "exitcode": 1, "root": "/workspace", "environment": {}, "summary": {"passed": 5, "failed": 5, "total": 10, "collected": 10}, "collectors": [{"nodeid": "", "outcome": "passed", "result": [{"nodeid": ".", "type": "Dir"}]}, {"nodeid": "examples/demos/demo_exceptions", "outcome": "passed", "result": []}, {"nodeid": "examples/demos", "outcome": "passed", "result": [{"nodeid": "examples/demos/demo_exceptions", "type": "Dir"}]}, {"nodeid": "examples", "outcome": "passed", "result": [{"nodeid": "examples/demos", "type": "Dir"}]}, {"nodeid": "telemetry/20250815T031640Z-8f0c26e4/patches", "outcome": "passed", "result": []}, {"nodeid": "telemetry/20250815T031640Z-8f0c26e4/reports", "outcome": "passed", "result": []}, {"nodeid": "telemetry/20250815T031640Z-8f0c26e4", "outcome": "passed", "result": [{"nodeid": "telemetry/20250815T031640Z-8f0c26e4/patches", "type": "Dir"}, {"nodeid": "telemetry/20250815T031640Z-8f0c26e4/reports", "type": "Dir"}]}, {"nodeid": "telemetry/20250815T040417Z-a3020170/reports", "outcome": "passed", "result": []}, {"nodeid": "telemetry/20250815T040417Z-a3020170", "outcome": "passed", "result": [{"nodeid": "telemetry/20250815T040417Z-a3020170/reports", "type": "Dir"}]}, {"nodeid": "telemetry", "outcome": "passed", "result": [{"nodeid": "telemetry/20250815T031640Z-8f0c26e4", "type": "Dir"}, {"nodeid": "telemetry/20250815T040417Z-a3020170", "type": "Dir"}]}, {"nodeid": "test_exceptions.py", "outcome": "passed", "result": [{"nodeid": "test_exceptions.py::test_divide_numbers_success", "type": "Function", "lineno": 11}, {"nodeid": "test_exceptions.py::test_divide_numbers_exceptions", "type": "Function", "lineno": 18}, {"nodeid": "test_exceptions.py::test_validate_age_success", "type": "Function", "lineno": 35}, {"nodeid": "test_exceptions.py::test_validate_age_exceptions", "type": "Function", "lineno": 42}, {"nodeid": "test_exceptions.py::test_process_data_success", "type": "Function", "lineno": 63}, {"nodeid": "test_exceptions.py::test_process_data_exceptions", "type": "Function", "lineno": 70}, {"nodeid": "test_exceptions.py::test_file_processor_exceptions", "type": "Function", "lineno": 93}, {"nodeid": "test_exceptions.py::test_safe_conversion_success", "type": "Function", "lineno": 108}, {"nodeid": "test_exceptions.py::test_safe_conversion_exceptions", "type": "Function", "lineno": 115}, {"nodeid": "test_exceptions.py::test_custom_error", "type": "Function", "lineno": 128}]}, {"nodeid": ".", "outcome": "passed", "result": [{"nodeid": "examples", "type": "Dir"}, {"nodeid": "telemetry", "type": "Dir"}, {"nodeid": "test_exceptions.py", "type": "Module"}]}], "tests": [{"nodeid": "test_exceptions.py::test_divide_numbers_success", "lineno": 11, "outcome": "passed", "keywords": ["test_divide_numbers_success", "test_exceptions.py", "workspace", ""], "setup": {"duration": 6.258300000006045e-05, "outcome": "passed"}, "call": {"duration": 6.287500000001778e-05, "outcome": "passed"}, "teardown": {"duration": 7.379200000001696e-05, "outcome": "passed"}}, {"nodeid": "test_exceptions.py::test_divide_numbers_exceptions", "lineno": 18, "outcome": "failed", "keywords": ["test_divide_numbers_exceptions", "test_exceptions.py", "workspace", ""], "setup": {"duration": 6.241700000009232e-05, "outcome": "passed"}, "call": {"duration": 0.0002587499999999743, "outcome": "failed", "crash": {"path": "/workspace/test_exceptions.py", "lineno": 29, "message": "assert \"unsupported ...tr' and 'int'\" == 'Both argumen...st be numbers'\n  \n  - Both arguments must be numbers\n  + unsupported operand type(s) for /: 'str' and 'int'"}, "traceback": [{"path": "test_exceptions.py", "lineno": 29, "message": "AssertionError"}], "longrepr": "def test_divide_numbers_exceptions():\n        \"\"\"Test division exceptions.\"\"\"\n        # Test ZeroDivisionError\n        with pytest.raises(ZeroDivisionError) as exc_info:\n            divide_numbers(10, 0)\n        assert str(exc_info.value) == \"Cannot divide by zero\"\n    \n        # Test TypeError\n        with pytest.raises(TypeError) as exc_info:\n            divide_numbers(\"10\", 2)\n>       assert str(exc_info.value) == \"Both arguments must be numbers\"\nE       assert \"unsupported ...tr' and 'int'\" == 'Both argumen...st be numbers'\nE         \nE         - Both arguments must be numbers\nE         + unsupported operand type(s) for /: 'str' and 'int'\n\ntest_exceptions.py:29: AssertionError"}, "teardown": {"duration": 7.829199999997982e-05, "outcome": "passed"}}, {"nodeid": "test_exceptions.py::test_validate_age_success", "lineno": 35, "outcome": "passed", "keywords": ["test_validate_age_success", "test_exceptions.py", "workspace", ""], "setup": {"duration": 4.8540999999957535e-05, "outcome": "passed"}, "call": {"duration": 4.258299999992943e-05, "outcome": "passed"}, "teardown": {"duration": 5.4124999999904944e-05, "outcome": "passed"}}, {"nodeid": "test_exceptions.py::test_validate_age_exceptions", "lineno": 42, "outcome": "failed", "keywords": ["test_validate_age_exceptions", "test_exceptions.py", "workspace", ""], "setup": {"duration": 6.0625000000147367e-05, "outcome": "passed"}, "call": {"duration": 0.00011933299999999925, "outcome": "failed", "crash": {"path": "/workspace/test_exceptions.py", "lineno": 49, "message": "AssertionError: assert None == 'INVALID_TYPE'\n +  where None = ValidationError('Age must be an integer').code\n +    where ValidationError('Age must be an integer') = <ExceptionInfo ValidationError('Age must be an integer') tblen=2>.value"}, "traceback": [{"path": "test_exceptions.py", "lineno": 49, "message": "AssertionError"}], "longrepr": "def test_validate_age_exceptions():\n        \"\"\"Test age validation exceptions.\"\"\"\n        # Test invalid type\n        with pytest.raises(ValidationError) as exc_info:\n            validate_age(\"25\")\n        assert str(exc_info.value) == \"Age must be an integer\"\n>       assert exc_info.value.code == \"INVALID_TYPE\"\nE       AssertionError: assert None == 'INVALID_TYPE'\nE        +  where None = ValidationError('Age must be an integer').code\nE        +    where ValidationError('Age must be an integer') = <ExceptionInfo ValidationError('Age must be an integer') tblen=2>.value\n\ntest_exceptions.py:49: AssertionError"}, "teardown": {"duration": 6.212499999991294e-05, "outcome": "passed"}}, {"nodeid": "test_exceptions.py::test_process_data_success", "lineno": 63, "outcome": "passed", "keywords": ["test_process_data_success", "test_exceptions.py", "workspace", ""], "setup": {"duration": 4.408399999999979e-05, "outcome": "passed"}, "call": {"duration": 3.874999999986528e-05, "outcome": "passed"}, "teardown": {"duration": 3.6458999999933184e-05, "outcome": "passed"}}, {"nodeid": "test_exceptions.py::test_process_data_exceptions", "lineno": 70, "outcome": "failed", "keywords": ["test_process_data_exceptions", "test_exceptions.py", "workspace", ""], "setup": {"duration": 4.2125000000003965e-05, "outcome": "passed"}, "call": {"duration": 5.0083000000089584e-05, "outcome": "failed", "crash": {"path": "/workspace/exceptions.py", "lineno": 40, "message": "exceptions.CustomError: Data cannot be None"}, "traceback": [{"path": "test_exceptions.py", "lineno": 75, "message": ""}, {"path": "exceptions.py", "lineno": 40, "message": "CustomError"}], "longrepr": "def test_process_data_exceptions():\n        \"\"\"Test data processing exceptions.\"\"\"\n        # Test None data\n        with pytest.raises(ValueError) as exc_info:\n>           process_data(None)\n\ntest_exceptions.py:75: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndata = None\n\n    def process_data(data):\n        \"\"\"Process data with multiple exception types (intentionally buggy).\"\"\"\n        if data is None:\n>           raise CustomError(\"Data cannot be None\")\nE           exceptions.CustomError: Data cannot be None\n\nexceptions.py:40: CustomError"}, "teardown": {"duration": 6.820899999993024e-05, "outcome": "passed"}}, {"nodeid": "test_exceptions.py::test_file_processor_exceptions", "lineno": 93, "outcome": "failed", "keywords": ["test_file_processor_exceptions", "test_exceptions.py", "workspace", ""], "setup": {"duration": 3.249999999987985e-05, "outcome": "passed"}, "call": {"duration": 0.00013583300000008514, "outcome": "failed", "crash": {"path": "/workspace/exceptions.py", "lineno": 68, "message": "OSError: [Errno 30] Read-only file system: 'nonexistent_file.txt'"}, "traceback": [{"path": "test_exceptions.py", "lineno": 105, "message": ""}, {"path": "exceptions.py", "lineno": 68, "message": "OSError"}], "longrepr": "def test_file_processor_exceptions():\n        \"\"\"Test FileProcessor exception handling.\"\"\"\n        processor = FileProcessor(\"nonexistent_file.txt\")\n    \n        # Test FileNotFoundError\n        with pytest.raises(FileNotFoundError) as exc_info:\n            processor.read_file()\n        assert \"File 'nonexistent_file.txt' not found\" in str(exc_info.value)\n    \n        # Test TypeError for write\n        with pytest.raises(TypeError) as exc_info:\n>           processor.write_file(123)\n\ntest_exceptions.py:105: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <exceptions.FileProcessor object at 0xffffb9ebb790>, content = 123\n\n    def write_file(self, content):\n        \"\"\"Write file with exception handling (intentionally buggy).\"\"\"\n>       with open(self.filename, 'w') as f:\n             ^^^^^^^^^^^^^^^^^^^^^^^^\nE       OSError: [Errno 30] Read-only file system: 'nonexistent_file.txt'\n\nexceptions.py:68: OSError"}, "teardown": {"duration": 9.179100000000773e-05, "outcome": "passed"}}, {"nodeid": "test_exceptions.py::test_safe_conversion_success", "lineno": 108, "outcome": "passed", "keywords": ["test_safe_conversion_success", "test_exceptions.py", "workspace", ""], "setup": {"duration": 3.479200000011673e-05, "outcome": "passed"}, "call": {"duration": 4.208300000008158e-05, "outcome": "passed"}, "teardown": {"duration": 3.916700000017315e-05, "outcome": "passed"}}, {"nodeid": "test_exceptions.py::test_safe_conversion_exceptions", "lineno": 115, "outcome": "failed", "keywords": ["test_safe_conversion_exceptions", "test_exceptions.py", "workspace", ""], "setup": {"duration": 5.191700000017896e-05, "outcome": "passed"}, "call": {"duration": 5.787499999998502e-05, "outcome": "failed", "crash": {"path": "/workspace/test_exceptions.py", "lineno": 124, "message": "Failed: DID NOT RAISE <class 'ValueError'>"}, "traceback": [{"path": "test_exceptions.py", "lineno": 124, "message": "Failed"}], "longrepr": "def test_safe_conversion_exceptions():\n        \"\"\"Test conversion exceptions.\"\"\"\n        # Test invalid literal\n        with pytest.raises(ValueError) as exc_info:\n            safe_conversion(\"abc\", int)\n        assert \"Cannot convert 'abc' to int\" in str(exc_info.value)\n    \n        # Test unsupported type\n>       with pytest.raises(ValueError) as exc_info:\nE       Failed: DID NOT RAISE <class 'ValueError'>\n\ntest_exceptions.py:124: Failed"}, "teardown": {"duration": 6.012500000007748e-05, "outcome": "passed"}}, {"nodeid": "test_exceptions.py::test_custom_error", "lineno": 128, "outcome": "passed", "keywords": ["test_custom_error", "test_exceptions.py", "workspace", ""], "setup": {"duration": 3.270799999999241e-05, "outcome": "passed"}, "call": {"duration": 5.595899999999432e-05, "outcome": "passed"}, "teardown": {"duration": 3.662499999990132e-05, "outcome": "passed"}}]}